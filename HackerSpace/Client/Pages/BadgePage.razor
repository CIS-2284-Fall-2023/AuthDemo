@page "/Badge/{Id:int}"
@inject IHttpClientFactory HttpClientFactory
<h3>Badge Page</h3>

<form>
    <div class="form-group">
        <label for="exampleInputEmail1">Email address</label>
        <input type="email" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" placeholder="Enter email">
        <small id="emailHelp" class="form-text text-muted">We'll never share your email with anyone else.</small>
    </div>
    <div class="form-group">
        <label for="exampleInputPassword1">Password</label>
        <input type="password" class="form-control" id="exampleInputPassword1" placeholder="Password">
    </div>
    <div class="form-check">
        <input type="checkbox" class="form-check-input" id="exampleCheck1">
        <label class="form-check-label" for="exampleCheck1">Check me out</label>
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</form>

@code {
    [Parameter]
    public int Id { get; set; }
    Badge? badge;

    protected async override Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        var client = HttpClientFactory.CreateClient("HackerSpace.PublicServerAPI");
        badge = await client.GetFromJsonAsync<Badge?>($"api/Badges/{Id}");
        //TODO: Add try catch. Notify user if Id does not exist in database
    }

}
