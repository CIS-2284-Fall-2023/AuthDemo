@page "/Badge/{Id:int}"
@inject IHttpClientFactory HttpClientFactory
@inject ILogger<BadgePage> Logger

<h3>Badge Page</h3>

@if (Badge == null)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="@Badge" OnSubmit="@Submit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="name">Name</label>
            <InputText @bind-Value="Badge!.Name" class="form-control" id="name" aria-describedby="name of badge" placeholder="Enter badge name" />
            <small id="nameHelp" class="form-text text-muted">Please enter name of badge.</small>
        </div>
        <div class="form-group">
            <label for="description">Description</label>
            <InputTextArea @bind-Value="Badge!.Description" class="form-control" id="description" rows="3" placeholder="Description" />
            <small id="descriptionHelp" class="form-text text-muted">Please enter description of badge.</small>
        </div>
        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>
}
<p>@message</p>
@code {
    [Parameter]
    public int Id { get; set; }

    public Badge? Badge { get; set; }
    private string message = "";
    protected async override Task OnParametersSetAsync()
    {
        Logger.LogInformation($"OnParametersSetAsync called from BadgePage.razor.");
        await base.OnParametersSetAsync();
        var client = HttpClientFactory.CreateClient("HackerSpace.PublicServerAPI");
        Badge = await client.GetFromJsonAsync<Badge?>($"api/Badges/{Id}");
        //TODO: Add try catch. Notify user if Id does not exist in database
    }

    private void Submit()
    {
        message = "Submit clicked!";
        Logger.LogInformation($"Submit clicked in Badge Page.");
    }

}
